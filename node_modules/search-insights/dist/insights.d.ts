import { InsightsEventType, InsightsEvent } from "./_sendEvent";
import { InitParams } from "./init";
import { InitSearchParams } from "./_initSearch";
import { RequestFnType } from "./utils/request";
import { InsightsSearchClickEvent, InsightsClickObjectIDsEvent, InsightsClickFiltersEvent } from "./click";
import { InsightsSearchConversionEvent, InsightsSearchConversionObjectIDsEvent, InsightsSearchConversionFiltersEvent } from "./conversion";
import { InsightsSearchViewObjectIDsEvent, InsightsSearchViewFiltersEvent } from "./view";
declare type Queue = {
    queue: string[][];
};
declare type AnalyticsFunction = {
    [key: string]: (fnName: string, fnArgs: any[]) => void;
};
declare type AlgoliaAnalyticsObject = Queue | AnalyticsFunction;
declare global {
    interface Window {
        AlgoliaAnalyticsObject: AlgoliaAnalyticsObject;
    }
}
/**
 *  AlgoliaAnalytics class
 */
declare class AlgoliaAnalytics {
    _apiKey: string;
    _appId: string;
    _region: string;
    _endpointOrigin: string;
    _userToken: string;
    _userHasOptedOut: boolean;
    _useCookie: boolean;
    _cookieDuration: number;
    _ua: string;
    _uaURIEncoded: string;
    version: string;
    protected sendEvent: (eventType: InsightsEventType, data: InsightsEvent) => void;
    protected _hasCredentials: boolean;
    init: (params: InitParams) => void;
    initSearch: (params: InitSearchParams) => void;
    getVersion: (callback: (version: string) => void) => void;
    addAlgoliaAgent: (algoliaAgent: string) => void;
    setUserToken: (userToken: string) => void;
    setAnonymousUserToken: () => void;
    getUserToken: (options?: any, callback?: (err: any, userToken: string) => void) => string;
    onUserTokenChange: (callback: (userToken: string) => void, options: {
        immediate: boolean;
    }) => void;
    clickedObjectIDsAfterSearch: (params: InsightsSearchClickEvent) => void;
    clickedObjectIDs: (params: InsightsClickObjectIDsEvent) => void;
    clickedFilters: (params: InsightsClickFiltersEvent) => void;
    convertedObjectIDsAfterSearch: (params: InsightsSearchConversionEvent) => void;
    convertedObjectIDs: (params: InsightsSearchConversionObjectIDsEvent) => void;
    convertedFilters: (params: InsightsSearchConversionFiltersEvent) => void;
    viewedObjectIDs: (params: InsightsSearchViewObjectIDsEvent) => void;
    viewedFilters: (params: InsightsSearchViewFiltersEvent) => void;
    constructor({ requestFn }: {
        requestFn: RequestFnType;
    });
}
export default AlgoliaAnalytics;
